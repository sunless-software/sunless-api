openapi: 3.0.3
info:
  title: Projects Blogs API
  version: 1.0.0

paths:
  /api/v1/projects/{projectID}/blogs:
    get:
      summary: Retrieve blogs for a specific project
      description: >
        Fetch a paginated list of blogs related to the given project.  
        Requires the global `READ_BLOGS` permission.  
        Only blogs belonging to non-deleted users and non-deleted projects are returned.  
        By default, only public blogs are returned.  
        If `showPrivateBlogs` is set to `true`, private blogs will be included, 
        but only in their encrypted form unless the requester is the blog creator 
        or a collaborator of the project, in which case the decrypted version is returned.
      tags:
        - Projects
      parameters:
        - in: path
          name: projectID
          required: true
          schema:
            type: integer
          description: ID of the project whose blogs to fetch
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of blogs to skip
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Maximum number of blogs to return
        - in: query
          name: showPrivateBlogs
          schema:
            type: boolean
            default: false
          description: >
            Include private blogs.  
            Requires `READ_BLOGS`.  
            If requester is not creator or collaborator, only encrypted data is shown.
      responses:
        "200":
          description: Blogs successfully retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Blogs successfully retrieved
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: Project kickoff blog
                        body:
                          type: string
                          example: This is the blog content
                        project_id:
                          type: integer
                          example: 3
                        user_id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          format: date-time
                          example: 2025-09-02T05:42:58.515Z
                        updated_at:
                          type: string
                          format: date-time
                          example: 2025-09-02T05:42:58.515Z
                  pagination:
                    type: object
                    properties:
                      offset:
                        type: integer
                        example: 0
                      limit:
                        type: integer
                        example: 20
                      count:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1

        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"

        "401":
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

        "403":
          description: Forbidden, insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenPermissionError"

components:
  schemas:
    ValidationError:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: field
              value:
                type: string
                example: ""
              msg:
                type: string
                example: "'limit' must be a number"
              path:
                type: string
                example: limit
              location:
                type: string
                example: query
        pagination:
          type: object
          properties:
            offset:
              type: integer
              example: 0
            limit:
              type: integer
              example: 0
            count:
              type: integer
              example: 0
            total:
              type: integer
              example: 0

    UnauthorizedError:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: You must provide a token
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            offset:
              type: integer
              example: 0
            limit:
              type: integer
              example: 0
            count:
              type: integer
              example: 0
            total:
              type: integer
              example: 0

    ForbiddenPermissionError:
      type: object
      properties:
        status:
          type: integer
          example: 403
        message:
          type: string
          example: You shall not pass!
        data:
          type: array
          items:
            type: object
        pagination:
          type: object
          properties:
            offset:
              type: integer
              example: 0
            limit:
              type: integer
              example: 0
            count:
              type: integer
              example: 0
            total:
              type: integer
              example: 0
