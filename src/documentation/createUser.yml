openapi: 3.0.3
info:
  title: Users API
  version: 1.0.0

paths:
  /api/v1/users:
    post:
      summary: Create a new user
      description: Creates a new user. Requires a role with `CREATE_USERS` permission.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User successfully created.
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CreateUserResponse"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        "401":
          description: Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "403":
          description: Forbidden, insufficient permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenPermissionError"
components:
  schemas:
    Pagination:
      type: object
      properties:
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 0
        count:
          type: integer
          example: 0
        total:
          type: integer
          example: 0

    CreateUserRequest:
      type: object
      required:
        - roleID
        - username
        - password
        - job_title
      properties:
        roleID:
          type: integer
          example: 1
        username:
          type: string
          minLength: 1
          example: john
        password:
          type: string
          example: Password123!
        profilePhoto:
          type: string
          format: uri
          example: http://myphoto.png
        phone:
          type: string
          example: "1122334455"
        email:
          type: string
          format: email
          example: fakemail@gmail.com
        shortDescription:
          type: string
          example: "There is always another secret"
          nullable: true
        jobTitle:
          type: string
          example: "Software developer"
        publicProfile:
          type: boolean
          example: true

    CreateUserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 4
        rol_id:
          type: integer
          example: 1
        username:
          type: string
          example: john
        password:
          type: string
          example: "****"
        profile_photo:
          type: string
          example: http://myphoto.png
        phone:
          type: string
          example: "1122334455"
        email:
          type: string
          example: fakemail@gmail.com
        short_description:
          type: string
          example: "There is always another secret"
        job_title:
          type: string
          example: "Software developer"
        public:
          type: boolean
          example: true
        banned:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-08-16T11:26:24.513Z
        updated_at:
          type: string
          format: date-time
          example: 2025-08-16T11:26:24.513Z

    ValidationError:
      type: object
      properties:
        status:
          type: integer
          example: 400
        message:
          type: string
          example: Invalid request
        data:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: field
              value:
                type: string
                example: ""
              msg:
                type: string
                example: username cannot be empty
              path:
                type: string
                example: username
              location:
                type: string
                example: body
        pagination:
          $ref: "#/components/schemas/Pagination"

    UnauthorizedError:
      type: object
      properties:
        status:
          type: integer
          example: 401
        message:
          type: string
          example: You must provide a token
        data:
          type: array
          items:
            type: object
          example: []
        pagination:
          $ref: "#/components/schemas/Pagination"

    ForbiddenError:
      type: object
      properties:
        status:
          type: integer
          example: 403
        message:
          type: string
          example: I see you, little mouse... you don't belong here. Run along!
        data:
          type: array
          items:
            type: object
          example: []
        pagination:
          $ref: "#/components/schemas/Pagination"

    ForbiddenPermissionError:
      type: object
      properties:
        status:
          type: integer
          example: 403
        message:
          type: string
          example: You shall not pass!
        data:
          type: array
          items:
            type: object
          example: []
        pagination:
          $ref: "#/components/schemas/Pagination"

    UserNotFoundError:
      type: object
      properties:
        status:
          type: integer
          example: 404
        message:
          type: string
          example: The user with the given id does not exist.
        data:
          type: array
          items:
            type: object
          example: []
        pagination:
          $ref: "#/components/schemas/Pagination"
